name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      # pre-release tag
      - "202[5-9].[0-9][0-9].[0-9]+-rc[0-9]+"
      # release tags
      - "202[5-9].[0-9][0-9].[0-9]+"

defaults:
  run:
    shell: bash

concurrency:
  # this ternary operator like expression gives us the name of the deployment environment (see https://docs.github.com/en/actions/learn-github-actions/expressions#example)
  group: ${{ github.ref_type != 'tag' && github.ref_name || contains(github.ref, '-rc') && 'test' || 'prod' }}
  cancel-in-progress: true

jobs:
  tests-pytest:
    uses: ./.github/workflows/tests-pytest.yml
    permissions:
      pull-requests: write
      contents: write

  build:
    runs-on: ubuntu-latest
    needs: [tests-pytest]
    if: (!cancelled())
    environment: ${{ github.ref_type != 'tag' && github.ref_name || contains(github.ref, '-rc') && 'test' || 'prod' }}
    permissions:
      packages: write

    strategy:
      matrix:
        image:
          - name: web app
            dockerfile: appcontainer/Dockerfile
            suffix: ""
          - name: functions
            dockerfile: azure_functions/Dockerfile
            suffix: "-functions"

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Write commit SHA to file
        if: ${{ matrix.image.name == 'web app' }}
        run: echo "${{ github.sha }}" >> web/static/sha.txt

      - name: Write tag to file
        if: ${{ matrix.image.name == 'web app' }}
        run: echo "${{ github.ref_name }}" >> web/static/version.txt

      - name: Docker Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - id: repo
        name: Repository name to lowercase
        run: |
          echo "lower=${GITHUB_REPOSITORY@L}" >> $GITHUB_OUTPUT

      - name: Cache Parameters
        id: cache_params
        run: |
          CACHE_SCOPE="ca-disaster-recovery"
          MAIN_BRANCH_REF="refs/heads/main"

          echo "cache_from_args=type=gha,scope=${CACHE_SCOPE},ref=${MAIN_BRANCH_REF}" >> $GITHUB_OUTPUT
          echo "cache_to_args=type=gha,scope=${CACHE_SCOPE},mode=max,ref=${MAIN_BRANCH_REF}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push ${{ matrix.image.name }} image to GitHub Container Registry
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          builder: ${{ steps.buildx.outputs.name }}
          build-args: GIT-SHA=${{ github.sha }}
          cache-from: ${{ steps.cache_params.outputs.cache_from_args }}
          cache-to: ${{ steps.cache_params.outputs.cache_to_args }}
          context: .
          file: ${{ matrix.image.dockerfile }}
          push: true
          tags: |
            ghcr.io/${{ steps.repo.outputs.lower }}${{ matrix.image.suffix }}:${{ github.ref_name }}
            ghcr.io/${{ steps.repo.outputs.lower }}${{ matrix.image.suffix }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.ref_type != 'tag' && github.ref_name || contains(github.ref, '-rc') && 'test' || 'prod' }}
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Trigger Azure pipeline run
        id: trigger_pipeline
        run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account get-access-token --resource https://app.vssps.visualstudio.com/
          RUN_ID=$(az pipelines run \
            --id "${{ secrets.ADO_PIPELINE_ID }}" \
            --org "${{ secrets.ADO_ORG_URL }}" \
            --project "${{ secrets.ADO_PROJECT }}" \
            --branch "${{ github.ref }}" \
            --commit-id ${{ github.sha }} \
            --query "id" -o tsv)
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Wait for Azure pipeline run to complete
        run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account get-access-token --resource https://app.vssps.visualstudio.com/
          echo "Waiting for Azure DevOps Pipeline run to complete..."
          while true; do
            PIPELINE_STATUS=$(az pipelines runs show \
              --id ${{ steps.trigger_pipeline.outputs.run_id }} \
              --org "${{ secrets.ADO_ORG_URL }}" \
              --project "${{ secrets.ADO_PROJECT }}" \
              --query "status" -o tsv)

            echo "Current pipeline status: $PIPELINE_STATUS"

            if [[ "$PIPELINE_STATUS" == "completed" ]]; then
              PIPELINE_RESULT=$(az pipelines runs show \
                --id ${{ steps.trigger_pipeline.outputs.run_id }} \
                --org "${{ secrets.ADO_ORG_URL }}" \
                --project "${{ secrets.ADO_PROJECT }}" \
                --query "result" -o tsv)

              echo "Pipeline completed with result: $PIPELINE_RESULT"
              if [[ "$PIPELINE_RESULT" == "succeeded" ]]; then
                exit 0
              else
                echo "Azure DevOps Pipeline failed with result: $PIPELINE_RESULT"
                exit 1
              fi
            elif [[ "$PIPELINE_STATUS" == "cancelling" || "$PIPELINE_STATUS" == "notStarted" || "$PIPELINE_STATUS" == "inProgress" ]]; then
              sleep 10
            else
              echo "Azure DevOps Pipeline finished with unexpected status: $PIPELINE_STATUS"
              exit 1
            fi
          done

  release:
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ github.ref_type == 'tag' && !contains(github.ref, '-rc') }}
    permissions:
      # https://github.com/softprops/action-gh-release#permissions
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false
          generate_release_notes: true
