parameters:
  - name: service_connection
    type: string
  - name: workspace
    type: string

steps:
  # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformInstaller#readme
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: 1.12.2

  - task: Bash@3
    name: GetAgentIP
    displayName: "Get DevOps Agent Public IP"
    inputs:
      targetType: "inline"
      script: |
        agent_ip=$(curl -s ifconfig.me)
        echo "Agent IP is $agent_ip"
        echo "##vso[task.setvariable variable=agent_ip;isOutput=true]$agent_ip"

  - task: Bash@3
    name: GetKeyVaultEnv
    displayName: "Determine Environment-Specific Key Vault Name"
    inputs:
      targetType: "inline"
      script: |
        # Replicate the env logic from main.tf
        if [ "${{ parameters.workspace }}" == "default" ]; then
          ENV_NAME="prod"
        else
          ENV_NAME="${{ parameters.workspace }}"
        fi

        # Get the first letter and convert to uppercase
        ENV_LETTER=$(echo $ENV_NAME | cut -c1 | tr 'a-z' 'A-Z')

        # Construct the environment-specific Key Vault name
        KEY_VAULT_NAME="KV-CDT-PUB-DDRC-${ENV_LETTER}-001"

        echo "Pipeline is targeting workspace: ${{ parameters.workspace }}"
        echo "Dynamically determined Key Vault Name: $KEY_VAULT_NAME"

        # Set the determined name as an output variable for reuse in later steps
        echo "##vso[task.setvariable variable=key_vault_name;isOutput=true]$KEY_VAULT_NAME"

  - task: AzureCLI@2
    displayName: "Add Agent IP to Firewall Rules"
    inputs:
      azureSubscription: "${{ parameters.service_connection }}"
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        echo "Adding IP $(GetAgentIP.agent_ip) to Key Vault: $(GetKeyVaultEnv.key_vault_name)"
        az keyvault network-rule add --name "$(GetKeyVaultEnv.key_vault_name)" --ip-address "$(GetAgentIP.agent_ip)/32"

        echo "Adding IP $(GetAgentIP.agent_ip) to Key Vault: KV-CDT-PUB-DDRC-P-001"
        az keyvault network-rule add --name "KV-CDT-PUB-DDRC-P-001" --ip-address "$(GetAgentIP.agent_ip)/32"

        echo "Adding IP $(GetAgentIP.agent_ip) to Storage Account: sacdtddrcp001"
        az storage account network-rule add --account-name "sacdtddrcp001" --ip-address "$(GetAgentIP.agent_ip)"

        echo "Pausing for 30 seconds to allow firewall rules to propagate..."
        sleep 30

  # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformTask/TerraformTaskV4#readme
  - task: TerraformTaskV4@4
    displayName: Terraform init
    inputs:
      provider: azurerm
      command: init
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#automated-terraform-cli-workflow
      commandOptions: -input=false
      # service connection
      backendServiceArm: Production
      # needs to match main.tf
      backendAzureRmResourceGroupName: RG-CDT-PUB-VIP-DDRC-P-001
      backendAzureRmStorageAccountName: sacdtddrcp001
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: terraform.tfstate

  - task: TerraformTaskV4@4
    displayName: Select environment
    inputs:
      provider: azurerm
      command: custom
      customCommand: workspace
      commandOptions: select ${{ parameters.workspace }}
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # service connection
      environmentServiceNameAzureRM: "${{ parameters.service_connection }}"

  - bash: python terraform/pipeline/tags.py
    displayName: Set env variables
    env:
      COMMIT_SHA: $(Build.SourceVersion)
      REASON: $(Build.Reason)
      INDIVIDUAL_SOURCE: $(Build.SourceBranchName)
      SOURCE_BRANCH: $(Build.SourceBranch)

  # Fetch the secret from Key Vault
  # This makes the secret available as $(slack-ddrc-notify-email) to subsequent tasks
  - task: AzureKeyVault@2
    displayName: "Get Slack notify email from Key Vault"
    inputs:
      connectedServiceName: "${{ parameters.service_connection }}"
      # Read the notification secret from the production vault
      # This is a chicken-and-egg if running for the very first time or rebuilding from scratch
      # So some manual steps must be taken to create the production KV and secret
      keyVaultName: "KV-CDT-PUB-DDRC-P-001"
      secretsFilter: "slack-ddrc-notify-email"

  - task: TerraformTaskV4@4
    displayName: Terraform plan
    inputs:
      provider: azurerm
      command: plan
      # wait for lock to be released, in case being used by another pipeline run
      # https://discuss.hashicorp.com/t/terraform-plan-wait-for-lock-to-be-released/6870/2
      commandOptions: -input=false -lock-timeout=5m -var="container_tag=$(container_tag)" -var="SLACK_NOTIFY_EMAIL=$(slack-ddrc-notify-email)"
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # service connection
      environmentServiceNameAzureRM: "${{ parameters.service_connection }}"
    # the plan is done as part of the apply (below), so don't bother doing it twice
    condition: |
      and(
        ne(variables['Build.SourceBranchName'], 'main'),
        ne(variables['tag_type'], 'test'),
        ne(variables['tag_type'], 'prod')
      )

  - task: TerraformTaskV4@4
    displayName: Terraform apply
    inputs:
      provider: azurerm
      command: apply
      # (ditto the lock comment above)
      commandOptions: -input=false -lock-timeout=5m -var="container_tag=$(container_tag)" -var="SLACK_NOTIFY_EMAIL=$(slack-ddrc-notify-email)"
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # service connection
      environmentServiceNameAzureRM: "${{ parameters.service_connection }}"
    # only run on main branch OR if it's a tag for test or prod
    condition: |
      or(
        eq(variables['Build.SourceBranchName'], 'main'),
        eq(variables['tag_type'], 'test'),
        eq(variables['tag_type'], 'prod')
      )

  - task: AzureCLI@2
    displayName: "Remove Agent IP from Firewall Rules"
    condition: always()
    inputs:
      azureSubscription: "${{ parameters.service_connection }}"
      scriptType: "bash"
      scriptLocation: "inlineScript"
      inlineScript: |
        AGENT_IP_RAW="$(GetAgentIP.agent_ip)"
        AGENT_IP_CIDR="$AGENT_IP_RAW/32"

        if az keyvault show --name "$(GetKeyVaultEnv.key_vault_name)" --query "properties.networkAcls.ipRules[?value=='$AGENT_IP_CIDR']" | grep -q "$AGENT_IP_CIDR"; then
          echo "Agent IP found in Key Vault firewall. Proceeding with removal."
          az keyvault network-rule remove --name "$(GetKeyVaultEnv.key_vault_name)" --ip-address "$AGENT_IP_CIDR"
        else
          echo "Agent IP not found in Key Vault firewall. Cleanup is not required."
        fi

        if az keyvault show --name "KV-CDT-PUB-DDRC-P-001" --query "properties.networkAcls.ipRules[?value=='$AGENT_IP_CIDR']" | grep -q "$AGENT_IP_CIDR"; then
          echo "Agent IP found in prod Key Vault firewall. Proceeding with removal."
          az keyvault network-rule remove --name "KV-CDT-PUB-DDRC-P-001" --ip-address "$AGENT_IP_CIDR"
        else
          echo "Agent IP not found in prod Key Vault firewall. Cleanup is not required."
        fi

        if az storage account network-rule list --account-name "sacdtddrcp001" --query "ipRules[?ipAddressOrRange=='$AGENT_IP_RAW']" -o tsv | grep -q "$AGENT_IP_RAW"; then
          echo "Agent IP found in Storage Account firewall. Proceeding with removal."
          az storage account network-rule remove --account-name "sacdtddrcp001" --ip-address "$AGENT_IP_RAW"
        else
          echo "Agent IP not found in Storage Account firewall. Cleanup is not required."
        fi
