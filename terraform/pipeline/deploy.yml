parameters:
  - name: service_connection
    type: string
  - name: workspace
    type: string

steps:
  # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformInstaller#readme
  - task: TerraformInstaller@0
    displayName: Install Terraform
    inputs:
      terraformVersion: 1.12.2
  # https://github.com/microsoft/azure-pipelines-terraform/tree/main/Tasks/TerraformTask/TerraformTaskV4#readme
  - task: TerraformTaskV4@4
    displayName: Terraform init
    inputs:
      provider: azurerm
      command: init
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#automated-terraform-cli-workflow
      commandOptions: -input=false
      # service connection
      backendServiceArm: Production
      # needs to match main.tf
      backendAzureRmResourceGroupName: RG-CDT-PUB-VIP-DDRC-P-001
      backendAzureRmStorageAccountName: sacdtddrcp001
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: terraform.tfstate
  - task: TerraformTaskV4@4
    displayName: Select environment
    inputs:
      provider: azurerm
      command: custom
      customCommand: workspace
      commandOptions: select ${{ parameters.workspace }}
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # service connection
      environmentServiceNameAzureRM: "${{ parameters.service_connection }}"
  - bash: python terraform/pipeline/tags.py
    displayName: Set env variables
    env:
      COMMIT_SHA: $(Build.SourceVersion)
      REASON: $(Build.Reason)
      INDIVIDUAL_SOURCE: $(Build.SourceBranchName)
      SOURCE_BRANCH: $(Build.SourceBranch)
  # Fetch the secret from Key Vault
  # This makes the secret available as $(slack-ddrc-notify-email) to subsequent tasks
  - task: AzureKeyVault@2
    displayName: "Get Slack notify email from Key Vault"
    inputs:
      connectedServiceName: "${{ parameters.service_connection }}"
      # Read the notification secret from the production vault
      # This is a chicken-and-egg if running for the very first time or rebuilding from scratch
      # So some manual steps must be taken to create the production KV and secret
      keyVaultName: "KV-CDT-PUB-DDRC-P-001"
      secretsFilter: "slack-ddrc-notify-email"
  - task: TerraformTaskV4@4
    displayName: Terraform plan
    inputs:
      provider: azurerm
      command: plan
      # wait for lock to be released, in case being used by another pipeline run
      # https://discuss.hashicorp.com/t/terraform-plan-wait-for-lock-to-be-released/6870/2
      commandOptions: -input=false -lock-timeout=5m -var="container_tag=$(container_tag)" -var="SLACK_NOTIFY_EMAIL=$(slack-ddrc-notify-email)"
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # service connection
      environmentServiceNameAzureRM: "${{ parameters.service_connection }}"
    # the plan is done as part of the apply (below), so don't bother doing it twice
    condition: |
      and(
        ne(variables['Build.SourceBranchName'], 'main'),
        ne(variables['tag_type'], 'test'),
        ne(variables['tag_type'], 'prod')
      )
  - task: TerraformTaskV4@4
    displayName: Terraform apply
    inputs:
      provider: azurerm
      command: apply
      # (ditto the lock comment above)
      commandOptions: -input=false -lock-timeout=5m -var="container_tag=$(container_tag)" -var="SLACK_NOTIFY_EMAIL=$(slack-ddrc-notify-email)"
      workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
      # service connection
      environmentServiceNameAzureRM: "${{ parameters.service_connection }}"
    # only run on main branch OR if it's a tag for test or prod
    condition: |
      or(
        eq(variables['Build.SourceBranchName'], 'main'),
        eq(variables['tag_type'], 'test'),
        eq(variables['tag_type'], 'prod')
      )
